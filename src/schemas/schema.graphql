enum QuoteReportSortBy {
  distance
  createdAt
}

enum CargoType {
  open
  enclosed
}

enum ServiceClass {
  doorToDoor
}

enum vehicleType {
  car
  smallsuv
  midsuv
  largesuv
  truck
  van
}

enum loadStatusType {
  open
  dispatched
  onRoute
  delivered
  completed
}

enum QuoteBooleanFilterName {
  isOperable
  isDiscount
}

enum simpleQuoteFilterNames {
  transportType
  serviceType
  quoteTo
  quoteFrom
}

enum floatRangeValueName {
  "Product Min Price"
  minPrice
  "Product Max Price"
  maxPrice

  minDistance

  maxDistance
}

enum vehicleFilterName {
  vehicleYear
  vehicleModel
  vehicleMake
}

type Locataion {
  state: String
  city: String
  zip: String
}

"A Reaction Vehicle"
type Vehicle implements Node {
  "Vehicle ID"
  _id: ID!

  "Vehicle year in which it was manufactued"
  vehicleYear: String!

  "Vehicle make which company"
  vehicleMake: String!

  "Vehicle model"
  vehicleModel: String!

  "Vehicle Desired Pick up date is"
  vehicleDesiredPickUp: DateTime!

  "Vehicle type is "
  type: vehicleType
}

"A Reaction Quote"
type Quote implements Node {
  "Quote ID Same as product Variant Id"
  _id: ID!

  "The date and time at which this product was created"
  createdAt: DateTime!

  "Quote generated person name"
  quotePersonName: String!

  "Quote generated person email"
  quotePersonEmail: String!

  "Quote generated person phone number"
  quotePersonPhoneNo: String

  "Quote generated from which state,city or zip"
  quoteFrom: Locataion!

  "Quote sent to which state,city or zip"
  quoteTo: Locataion!

  "Transport type is cargo open or enclosed"
  transportType: CargoType!

  "Vehicle which to be transported"
  vehicleId: ID

  "Vehicle Information"
  vehicleInfo: Vehicle

  "is vehicle operable or not"
  isOperable: Boolean!

  "MetaData for some additional fields"
  metafields: [Metafield]

  price: Float!

  insuranceIncluded: Boolean!

  serviceType: ServiceClass!

  distance: Float!

  isDiscount: Boolean!

  loadStatus: loadStatusType

  isApproved: Boolean!
}

type QuoteReportEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!
  "The Order Report"
  node: Quote
}

type QuoteConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [QuoteReportEdge]
  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [Quote]
  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!
  "The total number of nodes that match your query"
  totalCount: Int!
}

"A filter to be applied to a Catalog query"
input QuoteBooleanFilter {
  "The name of the filter"
  name: QuoteBooleanFilterName!

  "The filter value"
  value: Boolean!
}

input simpleQuoteFilter {
  "The name of the filter"
  name: simpleQuoteFilterNames!

  "The filter value"
  value: String!
}

input floatRangeValue {
  name: floatRangeValueName!
  value: Float!
}

input vehicleFilterValue {
  "The name of the filter"
  name: vehicleFilterName!

  "The filter value"
  value: String!
}

input locataionInput {
  state: String
  city: String
  zip: String
}

input vehicleInput {
  "Vehicle year in which it was manufactued"
  vehicleYear: String!

  "Vehicle make which company"
  vehicleMake: String!

  "Vehicle model"
  vehicleModel: String!

  "Vehicle Desired Pick up date is"
  vehicleDesiredPickUp: DateTime!

  "Vehicle type is "
  type: vehicleType
}

input updateVehicleInput {
  "Vehicle year in which it was manufactued"
  vehicleYear: String

  "Vehicle make which company"
  vehicleMake: String

  "Vehicle model"
  vehicleModel: String

  "Vehicle Desired Pick up date is"
  vehicleDesiredPickUp: DateTime

  "Vehicle type is "
  type: vehicleType
}

input quoteInput {
  "Quote generated person name"
  quotePersonName: String!

  "Quote generated person email"
  quotePersonEmail: String!

  "Quote generated person phone number"
  quotePersonPhoneNo: String

  "Quote generated from which state,city or zip"
  quoteFrom: locataionInput!

  "Quote sent to which state,city or zip"
  quoteTo: locataionInput!

  "Transport type is cargo open or enclosed"
  transportType: CargoType!

  "is vehicle operable or not"
  isOperable: Boolean!

  metafields: [MetafieldInput]

  insuranceIncluded: Boolean!

  serviceType: ServiceClass!

  distance: Float!
}

input updateQuoteInput {
  "Quote generated person name"
  quotePersonName: String

  "Quote generated person email"
  quotePersonEmail: String

  "Quote generated person phone number"
  quotePersonPhoneNo: String

  "Quote generated from which state,city or zip"
  quoteFrom: locataionInput

  "Quote sent to which state,city or zip"
  quoteTo: locataionInput

  "Transport type is cargo open or enclosed"
  transportType: CargoType

  "is vehicle operable or not"
  isOperable: Boolean

  metafields: [MetafieldInput]

  insuranceIncluded: Boolean

  serviceType: ServiceClass

  distance: Float

  loadStatus: loadStatusType

  isApproved: Boolean
}

input generateQuoteInput {
  shopId: String!
  serviceProductId: String!
  quote: quoteInput!
  vehicle: vehicleInput!
  # variant: ProductVariantInput
}

input updateInput {
  shopId: String!
  serviceProductId: String!
  quoteId: String!
  quote: updateQuoteInput
  vehicle: updateVehicleInput
}

type generateQuotePayload {
  isQuoteAdded: Boolean
  quoteId: String
}

type Mutation {
  generateQuote(input: generateQuoteInput!): generateQuotePayload
  updateQuote(input: updateInput): Boolean
}

type Query {
  getQuotes(
    # branches: String
    # startTime: DateTime
    # endTime: DateTime
    # riderID: String
    # OrderID: String
    # fromDate: DateTime
    # toDate: DateTime
    # deliveryTime: Float
    # searchQuery: String

    "Additional filters to apply"
    booleanFilters: [QuoteBooleanFilter]

    simpleFilters: [simpleQuoteFilter]

    "Price Range Filter"
    floatRange: [floatRangeValue]

    vehicleFilter: [vehicleFilterValue]

    "Optional text search query"
    searchQuery: String

    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor
    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor
    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt
    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt
    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int
    "Return results sorted in this order"
    sortOrder: SortOrder = desc
    "By default, groups are sorted by when they were created, oldest first. Set this to sort by one of the other allowed fields"
    sortBy: QuoteReportSortBy = distance
  ): QuoteConnection!
}
